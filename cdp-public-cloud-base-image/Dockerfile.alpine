# MAINTAINER Avanish Tiwari <aktiwari@cloudera.com>
# Base Image 
FROM alpine:latest

# Directory for storing scripts.
RUN mkdir -p /opt/cdp-public-cloud-automation
# Setting Up Environment Variable.
ENV LANG en_US.UTF-8
ENV LC_ALL en_US.UTF-8
ENV HOME_DIR="/opt/cdp-public-cloud-automation"

# Installing Required Packages.
RUN apk update && \
    apk add --no-cache \
        bash \
        jq \
        wget \
        git \
        make \
        which \
        unzip \
        rust \
        openssl \
        openssl-dev \
        gcc \
        g++ \
        libffi-dev \
        bzip2-dev \
        zlib-dev \
        linux-headers \
        musl-dev \
        ncurses-dev \
        curl && \
    wget https://www.python.org/ftp/python/3.10.9/Python-3.10.9.tgz && \    
    tar -xvf Python-3.10.9.tgz && \
    cd Python-3.10.9 && \
    ./configure --enable-optimizations && \
    make altinstall && \
    ln -s /usr/local/bin/python3.10 /usr/bin/python3 && \
    ln -s /usr/local/bin/python3.10 /usr/bin/python && \
    cd .. && \
    rm -rf Python-3.10.9 Python-3.10.9.tgz && \
    wget https://bootstrap.pypa.io/get-pip.py && \
    python get-pip.py && \
    rm get-pip.py

RUN pip install --upgrade pip && \
    pip install setuptools_rust && \
    pip install ansible-core==2.12.10 && \
    pip install cdpcli && \
    pip install jmespath==1.0.1 && \
    pip install git+https://github.com/cloudera-labs/cdpy@main#egg=cdpy && \
    ansible-galaxy collection install community.general && \
    ansible-galaxy collection install git+https://github.com/cloudera-labs/cloudera.cloud.git,main

#cloning cdp quickstart for aws only
RUN git clone https://github.com/cloudera-labs/cdp-tf-quickstarts.git -b main --single-branch --depth 1 $HOME_DIR/cdp-tf-quickstarts && \
    cd $HOME_DIR/cdp-tf-quickstarts && \
    git sparse-checkout init --cone && \
    git sparse-checkout set aws && \
    git checkout @ && \
    ls -ltrh
# Detect the architecture and install the correct AWS CLI
RUN ARCH=$(uname -m) && \
    if [ "$ARCH" = "x86_64" ]; then \
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"; \
    elif [ "$ARCH" = "aarch64" ]; then \
        curl "https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip" -o "awscliv2.zip"; \
    else \
        echo "Unsupported architecture: $ARCH" && exit 1; \
    fi && \
    unzip awscliv2.zip && \
    ./aws/install && \
    rm -rf awscliv2.zip aws

# Install Terraform
RUN wget "https://releases.hashicorp.com/terraform/1.4.6/terraform_1.4.6_linux_amd64.zip" -O "terraform_1.4.6_linux_amd64.zip" && \
    unzip terraform_1.4.6_linux_amd64.zip -d /usr/local/bin/ && \
    rm -rf terraform_1.4.6_linux_amd64.zip

COPY cdp-wrkshps-quickstarts /opt/cdp-public-cloud-automation/cdp-wrkshps-quickstarts
COPY entrypoint/docker-entrypoint.sh /usr/local/bin/
COPY entrypoint/hol-functions.sh /usr/local/bin/
COPY entrypoint/default.py /usr/local/lib/python3.10/site-packages/ansible/plugins/callback/
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

WORKDIR "$HOME_DIR"
CMD ["/bin/bash"]
#ENTRYPOINT ["docker-entrypoint.sh"]
